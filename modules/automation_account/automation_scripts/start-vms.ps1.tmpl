workflow start-vms
{
    Param 
    (    
        [String] 
        $exceptions_string = ''
    ) 
    
    # vars
    $resourceGroup   = "${resource_group}"
    $exceptions_list = ($exceptions_string).split(" ")
    
    # login - need to have managed identity for this to work https://docs.microsoft.com/en-us/azure/automation/enable-managed-identity-for-automation
    Connect-AzureRMAccount -Identity

    # get vm list
    $vms_in_rg = (Get-AzureRmVM -ResourceGroupName $resourceGroup).Name 
    
    # remove exceptions from vm list
    $vms_to_handle = InlineScript {
        $vms_in_rg = $using:vms_in_rg
        $exceptions_list = $using:exceptions_list
        $vms_to_handle = [System.Collections.ArrayList]@()
        foreach ($vm in $vms_in_rg) {
            if ($exceptions_list -notcontains $vm) {
                $vms_to_handle += $vm
            }
        }
        return $vms_to_handle
    }
    Write-Output 'VM list:'
    Write-Output $vms_to_handle

    # iterate over vms
    foreach -parallel ($vm in $vms_to_handle) 
    { 
        # start vm
        Start-AzureRmVM -ResourceGroupName $resourceGroup -Name $vm

        # update monitoring tag
        $tags  = (Get-AzureRmResource -ResourceGroupName $resourceGroup -Name $vm).Tags
        $new_tags = InlineScript {
            $new_tags = $Using:tags
            $new_tags.not_monitored = "false"
            return $new_tags
        }
        Set-AzureRmResource -ResourceGroupName $resourceGroup -Name $vm -ResourceType "Microsoft.Compute/VirtualMachines" -Tag $new_tags -Force 
    }
}

