workflow start-vms
{   
    # vars
    $resourceGroup = "${resource_group}"
    $sequence_tag  = 'sequence_start'
    $delay_between_groups = ${delay_between_groups}
    
    # login - need to have managed identity for this to work https://docs.microsoft.com/en-us/azure/automation/enable-managed-identity-for-automation
    Connect-AzureRMAccount -Identity

    # get vm list
    $vms_in_rg = Get-AzureRmVM -ResourceGroupName $resourceGroup
    
    # remove exceptions from vm list by shutdown_exclude tag
    $vms_to_handle = InlineScript {
        $vms_in_rg = $using:vms_in_rg
        $vms_to_handle = [System.Collections.ArrayList]@()
        foreach ($vm in $vms_in_rg) {
            if ($vm.Tags.shutdown_exclude -ne 'true') {
                $vms_to_handle += $vm
            }
        }
        return $vms_to_handle
    }
    "vms to handle:"
    $vms_to_handle.Name
    ""

    # create ordering groups
    $ordered_vms = InlineScript {
        $vms_to_handle = $using:vms_to_handle
        $sequence_tag  = $using:sequence_tag
        # add groups
        $ordered_vms = [ordered]@{}
        $ordered_vms['0'] = [System.Collections.ArrayList]@()
        foreach ($vm in $vms_to_handle) {
            if ($vm.Tags[$sequence_tag] -match '^\d+') {
                $ordered_vms[$vm.Tags[$sequence_tag]] = [System.Collections.ArrayList]@()
            }
        }
        # add vms into groups
        foreach ($vm in $vms_to_handle) {
            if ($vm.Tags[$sequence_tag] -match '^\d+') {
                $ordered_vms[$vm.Tags[$sequence_tag]] += $vm.Name
            } else {
                $ordered_vms['0'] += $vm.Name
            }
        }

        # sort groups
        $ordered_vms = $ordered_vms.GetEnumerator() | sort -Property Key
        return $ordered_vms
    }
    "sequence groups:"
    foreach ($group in $ordered_vms) {
        $group.Name
        foreach ($vm in $group.Value) { 
            $vm
        }
        ""
    }
    
    # iterate over vms
    foreach ($group in $ordered_vms) {
        # there is duplication because i wasted too much time trying to put -parallel as a variable and splatting in. Powershell problems...
        # 'Splatting is not permitted in workflow activities or in calls to workflows'
        if ($group.Key -match '_series$') {
            foreach ($vm in $group.Value) { 
                InlineScript {
                    $vm            = $Using:vm
                    $resourceGroup = $Using:resourceGroup

                    # start vm
                    Start-AzureRmVM -ResourceGroupName $resourceGroup -Name $vm

                    # update monitoring tag
                    $tags = (Get-AzureRmResource -ResourceGroupName $resourceGroup -Name $vm).Tags
                    $tags.not_monitored = "false"
                    Set-AzureRmResource -ResourceGroupName $resourceGroup -Name $vm -ResourceType "Microsoft.Compute/VirtualMachines" -Tag $tags -Force
                } 
            }
        } else {
            foreach -parallel ($vm in $group.Value) {
                InlineScript {
                    $vm            = $Using:vm
                    $resourceGroup = $Using:resourceGroup

                    # start vm
                    Start-AzureRmVM -ResourceGroupName $resourceGroup -Name $vm

                    # update monitoring tag
                    $tags = (Get-AzureRmResource -ResourceGroupName $resourceGroup -Name $vm).Tags
                    $tags.not_monitored = "false"
                    Set-AzureRmResource -ResourceGroupName $resourceGroup -Name $vm -ResourceType "Microsoft.Compute/VirtualMachines" -Tag $tags -Force 
                }              
            }
        }
        # add delay between groups
        Start-Sleep -Seconds $delay_between_groups
    }
}